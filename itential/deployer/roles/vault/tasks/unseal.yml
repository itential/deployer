# Copyright (c) 2022, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

# Saving unseal keys to a directory (may remove this later for security)
- name: Create directory to store unseal keys
  ansible.builtin.file:
    path: "{{ vault_unseal_keys_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0750"

- name: Create directory to store root key
  ansible.builtin.file:
    path: "{{ vault_root_key_dir }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0750"

# Show status of vault server
- name: Get status of vault server
  ansible.builtin.command: vault status -format json
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
  register: vault_status
  changed_when: false

- name: Parse output of vault status
  ansible.builtin.set_fact:
    vault_status_parsed: "{{ vault_status.stdout | from_json }}"

- name: Initialize vault
  when: not vault_status_parsed.initialized
  block:
    - name: Initialize vault server
      ansible.builtin.shell: vault operator init -format json
      environment:
        VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
      register: vault_init_results
      changed_when: true

    - name: Parse output of vault init
      ansible.builtin.set_fact:
        vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

    - name: Write unseal keys to files
      ansible.builtin.copy:
        dest: "{{ vault_unseal_keys_dir }}/unseal_key_{{ item.0 }}"
        content: "{{ item.1 }}"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0660"
      with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
      no_log: true

    - name: Write root token to file
      ansible.builtin.copy:
        content: "{{ vault_init_parsed.root_token }}"
        dest: "{{ vault_root_key_dir }}/token.txt"
        owner: "{{ vault_user }}"
        group: "{{ vault_group }}"
        mode: "0660"

- name: Fetch root token
  ansible.builtin.fetch:
    src: "{{ vault_root_key_dir }}/token.txt"
    dest: ./token.txt
    flat: true
  when:
    - configure_vault | bool
    - inventory_hostname in groups["vault"]

- name: Unseal vault
  when: vault_status_parsed.sealed
  block:
    - name: Getting path to unseal keys
      ansible.builtin.find:
        paths: "{{ vault_unseal_keys_dir }}"
      register: unseal_key_files

    - name: Reading unseal key contents
      ansible.builtin.command: cat {{ item.path }}
      with_items: "{{ unseal_key_files.files }}"
      register: unseal_keys
      changed_when: false
      no_log: true

    - name: Unseal vault with unseal keys
      ansible.builtin.shell: vault operator unseal {{ item.stdout }}
      environment:
        VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
      with_items: "{{ unseal_keys.results }}"
      changed_when: false
      no_log: true

- name: Get root key
  ansible.builtin.slurp:
    src: '{{ vault_root_key_dir }}/token.txt'
  register: root_key

# Check if kv-v2 engine exists
- name: Check for kv-v2 secrets engine
  ansible.builtin.shell: vault secrets list
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ root_key.content | b64decode }}"
  register: secrets
  changed_when: false

- name: Enable KV Secrets Engine
  ansible.builtin.shell: vault secrets enable kv-v2
  environment:
    VAULT_ADDR: "http://{{ inventory_hostname }}:{{ vault_port }}"
    VAULT_TOKEN: "{{ root_key.content | b64decode }}"
  when: '"kv-v2" not in secrets.stdout'
  changed_when: true
