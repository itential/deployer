# Copyright (c) 2022, Itential, LLC
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Include release vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - "{{ iag_release }}-{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yaml"
    - "release-undefined.yaml"

- name: Check for valid IAG release
  ansible.builtin.fail:
    msg: "missing or invalid iag_release"
  when: iag_release == "UNDEFINED"

- name: Install base OS packages
  ansible.builtin.include_role:
    name: os
  tags: install_base_os_packages

- name: Create temporary working directory
  ansible.builtin.tempfile:
    state: directory
  register: workingdir

- name: Install Gateway packages (online)
  ansible.builtin.yum:
    name: "{{ item }}"
    state: present
  with_items: "{{ gateway_packages }}"
  when: not offline_install
  tags: install_gateway_packages

- name: Install Gateway packages (offline)
  ansible.builtin.import_role:
    name: offline
    tasks_from: install-rpms
  when: offline_install
  tags: install_gateway_packages

- name: Create itential group
  ansible.builtin.group:
    name: "{{ iag_group }}"

- name: Create itential user
  ansible.builtin.user:
    name: "{{ iag_user }}"
    group: "{{ iag_group }}"
    groups: wheel
    generate_ssh_key: true
    state: present

- name: Create working directories
  ansible.builtin.file:
    name: "{{ item }}"
    owner: "{{ iag_user }}"
    group: "{{ iag_group }}"
    mode: "0775"
    state: directory
  with_items:
    - /etc/ansible
    - "{{ iag_log_dir }}"
    - "{{ iag_properties_location }}"
    - "{{ iag_data_dir }}"
    - "{{ iag_install_dir }}"
    - "{{ iag_install_dir }}/ansible/collections"
    - "{{ iag_install_dir }}/ansible/inventory"
    - "{{ iag_install_dir }}/ansible/modules"
    - "{{ iag_install_dir }}/ansible/roles"
    - "{{ iag_install_dir }}/ansible/collections"
    - "{{ iag_install_dir }}/ansible/playbooks"
    - "{{ iag_install_dir }}/ansible/plugins/modules"
    - "{{ iag_install_dir }}/ansible/scripts"
    - "{{ iag_install_dir }}/conf"
    - "{{ iag_install_dir }}/conf/certs"
    - "{{ iag_install_dir }}/nornir/conf"
    - "{{ iag_install_dir }}/nornir/inventory"
    - "{{ iag_install_dir }}/nornir/modules"
    - "{{ iag_install_dir }}/scripts"
    - "{{ iag_install_dir }}/terraform"
    - "{{ iag_install_dir }}/terraform/scripts"

- name: Create Python venv directory
  ansible.builtin.file:
    name: "{{ iag_install_dir }}/python-venvs"
    owner: "{{ iag_user }}"
    group: "{{ iag_group }}"
    mode: "0775"
    state: directory
  when: iag_enable_python_venv | bool

- name: Copy certs
  ansible.builtin.include_tasks:
    file: copy-certs.yml
  when: iag_https and iag_ssl_copy_certs

- name: Install Python
  ansible.builtin.include_tasks:
    file: install-python.yml
  tags: install_python

# Need to install ansible within the virtual environment
- name: Install Ansible
  when: iag_enable_ansible | bool
  block:
    - name: Install Ansible into the python virtual environment
      ansible.builtin.pip:
        name: "{{ iag_ansible_version }}"
        virtualenv: "{{ iag_install_dir }}/venv"
      when: not offline_install

    - name: Create Ansible config file
      ansible.builtin.template:
        src: ansible.cfg.j2
        dest: /etc/ansible/ansible.cfg
        backup: true

    - name: Create empty ansible inventory files
      ansible.builtin.file:
        name: "{{ iag_install_dir }}/ansible/inventory/hosts"
        owner: "{{ iag_user }}"
        group: "{{ iag_group }}"
        mode: "0660"
        state: touch

    - name: Create empty ansible vault file
      ansible.builtin.file:
        name: "{{ iag_install_dir }}/conf/.vault_password_file"
        owner: "{{ iag_user }}"
        group: "{{ iag_group }}"
        mode: "0400"
        state: touch

- name: Install Terraform
  when: iag_enable_terraform | bool
  block:
    - name: Install Terraform (online)
      when: not offline_install
      block:
        - name: Download Terraform
          ansible.builtin.get_url:
            url: "{{ iag_terraform_url }}"
            dest: "{{ workingdir.path }}/{{ iag_terraform_url | basename }}"
            mode: "0644"

        - name: Extract Terraform
          ansible.builtin.unarchive:
            src: "{{ workingdir.path }}/{{ iag_terraform_url | basename }}"
            dest: /usr/local/bin
            remote_src: true

    - name: Install Terraform (offline)
      ansible.builtin.include_tasks:
        file: terraform-offline.yml
      when: offline_install

- name: Check if Automation Gateway is already installed
  ansible.builtin.stat:
    path: "{{ iag_install_dir }}/venv/automation-gateway"
  register: iag_installed

- name: Install Automation Gateway
  when: not iag_installed.stat.exists
  block:
    - name: Copy IAG to host
      ansible.builtin.copy:
        src: "{{ iag_whl_file }}"
        dest: "{{ workingdir.path }}/{{ iag_whl_file | basename }}"
        mode: '0644'

    - name: Install IAG
      ansible.builtin.pip:
        name: "{{ workingdir.path }}/{{ iag_whl_file | basename }}"
        virtualenv: "{{ iag_install_dir }}/venv"

- name: Set ownership/permissions and create properties.yaml
  when: not iag_installed.stat.exists
  block:
    # Using chown and chmod is a faster way to enforce the file ownership and
    # permissions. The file module in ansible checks each and every file/dir
    # in the tree, 'chown -R ' does not, it just sets it.
    - name: Set appropriate ownership on all gateway files
      ansible.builtin.command:
        cmd: "chown -R {{ iag_user }}:{{ iag_group }} {{ iag_install_dir }}/venv"
      changed_when: true

    - name: Set appropriate permissions on all gateway files
      ansible.builtin.command:
        cmd: "chmod -R 775 {{ iag_install_dir }}/venv"
      changed_when: true

    - name: Create properties.yaml using template based on the version
      ansible.builtin.template:
        src: "properties.{{ iag_release }}.yaml.j2"
        dest: "{{ iag_properties_location }}/properties.yaml"
        owner: "{{ iag_user }}"
        group: "{{ iag_group }}"
        mode: "0660"

- name: Create Nornir files
  when: iag_enable_nornir | bool
  block:
    - name: Create Nornir inventory files (empty)
      ansible.builtin.file:
        name: "{{ item }}"
        owner: "{{ iag_user }}"
        group: "{{ iag_group }}"
        mode: "0660"
        state: touch
      with_items:
        - "{{ iag_install_dir }}/nornir/inventory/defaults.yaml"
        - "{{ iag_install_dir }}/nornir/inventory/groups.yaml"
        - "{{ iag_install_dir }}/nornir/inventory/hosts.yaml"

    - name: Create Nornir config file
      ansible.builtin.template:
        src: nornir.config.yaml.j2
        dest: "{{ iag_install_dir }}/nornir/config.yaml"
        owner: "{{ iag_user }}"
        group: "{{ iag_group }}"
        mode: "0660"

- name: Write automation-gateway.service to host
  ansible.builtin.template:
    src: automation-gateway.service.j2
    dest: /etc/systemd/system/automation-gateway.service
    backup: true

# Check if firewalld is running, if it is then open the appropriate ports
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Configure HTTP Port on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ iag_port }}/tcp"
    permanent: true
    state: "{{ iag_https or iag_haproxy | ternary('disabled', 'enabled') }}"
    zone: public
    immediate: true
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - ansible_facts.services["firewalld.service"].state == "running"
    - ansible_facts.services["firewalld.service"].status == "enabled"

- name: Configure HTTPS Port on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ iag_https_port }}/tcp"
    permanent: true
    state: "{{ iag_https or iag_haproxy | ternary('enabled', 'disabled') }}"
    zone: public
    immediate: true
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - ansible_facts.services["firewalld.service"].state == "running"
    - ansible_facts.services["firewalld.service"].status == "enabled"

- name: Allow IAG to listen on tcp port {{ iag_port }}
  community.general.seport:
    ports: "{{ iag_port }}"
    proto: tcp
    setype: http_port_t
    state: present

- name: Start Automation Gateway service
  ansible.builtin.service:
    name: automation-gateway
    enabled: true
    state: restarted
    daemon_reload: true

- name: Update release file
  ansible.builtin.include_tasks:
    file: update-release-file.yaml

- name: Remove temporary working directory
  ansible.builtin.file:
    path: "{{ workingdir.path }}"
    state: absent
