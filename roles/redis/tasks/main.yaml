# Copyright (c) 2024, Itential, Inc
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
---
- name: Include release vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - "release-{{ iap_release }}.yaml"
    - "release-undefined.yaml"

- name: Check for valid Redis release
  ansible.builtin.fail:
    msg: "missing or invalid redis_packages"
  when: redis_packages == "UNDEFINED"

- name: Install base OS packages
  ansible.builtin.include_role:
    name: os
  tags: install_base_os_packages

- name: Configure SELinux
  tags: configure_selinux
  block:
    - name: Install custom SELinux profiles
      ansible.builtin.include_role:
        name: selinux

- name: Install Redis
  block:
    - name: Include tasks to install Redis (online)
      when: not offline_install
      block:
        - name: Include tasks to install Redis using Remi repo (online)
          ansible.builtin.include_tasks:
            file: redis-using-remi-repo.yaml
          when:
            - redis_install_method == "remi_repo"

        - name: Include tasks to install Redis using source
          ansible.builtin.include_tasks:
            file: redis-using-source.yaml
          when: redis_install_method == "source"

    - name: Include tasks to install Redis (offline)
      ansible.builtin.include_tasks:
        file: redis-offline.yml
      when: offline_install
  tags: install_redis

- name: Ensure the directories for the config exists
  ansible.builtin.file:
    path: "{{ redis_conf_path }}"
    state: directory
    owner: "{{ redis_owner }}"
    group: "{{ redis_group }}"
    mode: "0760"

- name: Use template to generate redis.conf
  ansible.builtin.template:
    src: redis.conf.j2
    dest: "{{ redis_conf_file }}"
    owner: "{{ redis_owner }}"
    group: "{{ redis_group }}"
    mode: "0640"
    backup: true

# Check if firewalld is running, if it is then open the appropriate ports
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Open Port on FirewallD Public Zone
  ansible.posix.firewalld:
    port: "{{ redis_port }}/tcp"
    permanent: true
    state: enabled
    zone: public
    immediate: true
  when:
    - ansible_facts.services["firewalld.service"] is defined
    - (ansible_facts.services["firewalld.service"].state == "running")
    - (ansible_facts.services["firewalld.service"].status == "enabled")
  ignore_errors: true

- name: Enable redis
  throttle: 1
  ansible.builtin.systemd:
    name: redis
    enabled: true
    state: restarted
    daemon_reload: true

- name: Determine redis version
  ansible.builtin.shell:
    cmd: redis-server --version | cut -d" " -f3 | cut -d"=" -f2
  register: result
  check_mode: false
  changed_when: false
  failed_when: result.rc != 0 and result.rc != 127

- name: Set redis version variable
  ansible.builtin.set_fact:
    redis_server_version: "{{ result.stdout }}"

- name: Write redis release information
  ansible.builtin.lineinfile:
    path: "{{ itential_release_file }}"
    line: "REDIS={{ redis_server_version }}"
    create: true
